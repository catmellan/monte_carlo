import streamlit as st
import numpy as np
import tempfile
import base64
import matplotlib.pyplot as plt
from matplotlib import animation
from matplotlib.animation import PillowWriter
from streamlit.components.v1 import html

st.set_page_config(layout="wide")
st.title("üé≤ –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–æ–∫ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ")

# === –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏")
    init_balance = st.number_input("üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", value=100.0, help="–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—É–º–º–∞ –≤ –∫–∞–∂–¥–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏")
    winrate = st.slider("üéØ Winrate (%)", 0, 100, 50, help="–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    rr = st.number_input("‚öñÔ∏è Reward/Risk (RR)", value=2.0, help="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫ —Ä–∏—Å–∫—É –≤ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ")
    risk_pct = st.number_input("üî• –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)", value=2.0, help="–°–∫–æ–ª—å–∫–æ % –∫–∞–ø–∏—Ç–∞–ª–∞ —Ä–∏—Å–∫—É–µ—Ç—Å—è –≤ –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–µ")
    num_trades = st.number_input("üîÅ –°–¥–µ–ª–æ–∫ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏", min_value=1, max_value=1000, value=50, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –Ω–∞ –æ–¥–Ω—É —Å–∏–º—É–ª—è—Ü–∏—é")
    num_simulations = st.number_input("üìä –ö–æ–ª-–≤–æ —Å–∏–º—É–ª—è—Ü–∏–π", min_value=1, max_value=10000, value=100, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å–∏–º—É–ª—è—Ü–∏–π")
    liquidation_pct = st.number_input("üíÄ –ü–æ—Ä–æ–≥ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ (%)", min_value=0.0, max_value=100.0, value=1.0,
                                      help="–õ–∏–∫–≤–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –Ω–∏–∂–µ X% –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞")

# === –°–∏–º—É–ª—è—Ü–∏—è ===
def simulate():
    all_data = []
    final_balances = []
    liquidation_hits = 0
    liquidation_on_trade = []
    max_drawdowns = []

    threshold = init_balance * (liquidation_pct / 100)

    for _ in range(int(num_simulations)):
        balance = init_balance
        peak = balance
        row = [balance]
        liq_hit = None
        max_dd = 0

        for t in range(int(num_trades)):
            if balance <= threshold:
                balance = 0
                if liq_hit is None:
                    liquidation_hits += 1
                    liq_hit = t + 1
                    liquidation_on_trade.append(liq_hit)
                row.append(0)
                continue

            is_win = np.random.rand() < winrate / 100
            risk = balance * risk_pct / 100
            pnl = risk * rr if is_win else -risk
            balance += pnl
            peak = max(peak, balance)
            dd = (peak - balance) / peak if peak > 0 else 0
            max_dd = max(max_dd, dd)
            row.append(max(balance, 0))

        all_data.append(row)
        final_balances.append(balance)
        max_drawdowns.append(max_dd)

    return (np.array(all_data),
            np.array(final_balances),
            liquidation_hits,
            liquidation_on_trade,
            np.array(max_drawdowns))

# === –ó–∞–ø—É—Å–∫
if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é"):
    data, balances, liq_count, liq_trades, drawdowns = simulate()
    x = np.arange(int(num_trades) + 1)

    # === –ú–µ—Ç—Ä–∏–∫–∏
    st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    col1, col2, col3 = st.columns(3)
    col1.metric("üìå –ú–µ–¥–∏–∞–Ω–∞", f"{np.median(balances):,.2f}")
    col1.metric("üß† –°—Ä–µ–¥–Ω–µ–µ", f"{np.mean(balances):,.2f}")
    col2.metric("üîª –ú–∏–Ω–∏–º—É–º", f"{np.min(balances):,.2f}")
    col2.metric("üü¢ –ú–∞–∫—Å–∏–º—É–º", f"{np.max(balances):,.2f}")
    col3.metric("üé≤ –°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", f"{np.std(balances):,.2f}")
    col3.metric("üìä –°–∏–º—É–ª—è—Ü–∏–π", str(len(balances)))
    st.metric("üíÄ –õ–∏–∫–≤–∏–¥–∞—Ü–∏–∏", f"{liq_count} –∏–∑ {len(balances)} ({liq_count / len(balances) * 100:.1f}%)")

    # –î–æ–ø. –≤—ã–≤–æ–¥:
    st.subheader("üìà –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    st.write(f"üß™ –ú–µ–¥–∏–∞–Ω–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: **{np.median(drawdowns) * 100:.2f}%**")
    st.write(f"üìâ –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Å–∞–¥–∫–∞: **{np.mean(drawdowns) * 100:.2f}%**")
    st.write(f"üíµ –°–∏–º—É–ª—è—Ü–∏–π —Å –∏—Ç–æ–≥–æ–º > –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞: **{np.sum(balances > init_balance)} ({np.mean(balances > init_balance) * 100:.1f}%)**")
    st.write(f"üí∞ –°–∏–º—É–ª—è—Ü–∏–π —Å –∏—Ç–æ–≥–æ–º > 2√ó –∫–∞–ø–∏—Ç–∞–ª–∞: **{np.sum(balances > init_balance * 2)} ({np.mean(balances > init_balance * 2) * 100:.1f}%)**")
    st.write(f"üöÄ –°–∏–º—É–ª—è—Ü–∏–π —Å –∏—Ç–æ–≥–æ–º > 10√ó –∫–∞–ø–∏—Ç–∞–ª–∞: **{np.sum(balances > init_balance * 10)} ({np.mean(balances > init_balance * 10) * 100:.1f}%)**")

    # –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    if np.median(balances) > init_balance:
        st.success("‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–±—ã–ª—å–Ω–∞—è")
    else:
        st.error("‚ùå –°—Ç—Ä–∞—Ç–µ–≥–∏—è —É–±—ã—Ç–æ—á–Ω–∞—è")

    # –ü–æ—Ä–æ–≥ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
    breakeven_wr = 100 / (1 + rr)
    st.info(f"‚ö†Ô∏è –ü–æ—Ä–æ–≥ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: **{breakeven_wr:.2f}%** –ø—Ä–∏ RR = {rr:.2f}")

    # üìà –°–∏–º—É–ª—è—Ü–∏–∏
    st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫–∏")
    st.caption("‚ö†Ô∏è –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º—É–ª—è—Ü–∏–π (–¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏)")

    # –í—Å–µ —Å–∏–º—É–ª—è—Ü–∏–∏
    st.markdown("#### üìà 100 —Å–∏–º—É–ª—è—Ü–∏–π –∫–∞–ø–∏—Ç–∞–ª–∞")
    fig1, ax1 = plt.subplots()
    for i in range(min(100, len(data))):
        ax1.plot(x, data[i])
    st.pyplot(fig1)

    # –õ—É—á—à–∏–µ/—Ö—É–¥—à–∏–µ
    st.markdown("#### üü¢ 10 –ª—É—á—à–∏—Ö | üîª 10 —Ö—É–¥—à–∏—Ö")
    fig2, ax2 = plt.subplots()
    for idx in balances.argsort()[-10:]:
        ax2.plot(x, data[idx], linestyle='--', alpha=0.7)
    for idx in balances.argsort()[:10]:
        ax2.plot(x, data[idx], linestyle='-', alpha=0.7)
    st.pyplot(fig2)

    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∏—Ç–æ–≥–æ–≤
    st.markdown("#### üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤")
    fig3, ax3 = plt.subplots()
    ax3.hist(balances, bins=50, color="skyblue", edgecolor="black")
    ax3.axvline(init_balance, color="red", linestyle="--", label="–°—Ç–∞—Ä—Ç")
    ax3.legend()
    st.pyplot(fig3)

    # === üß† –ö–∞—Ä—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    st.subheader("üß† –ö–∞—Ä—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π (–ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∏–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞)")
    st.caption("–ù–∞ –∫–∞–∫–æ–º —à–∞–≥–µ, —Å–∫–æ–ª—å–∫–æ —Å–∏–º—É–ª—è—Ü–∏–π –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–∏–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
    heat = [np.sum(data[:, j] < init_balance) / len(data) for j in range(1, int(num_trades) + 1)]
    fig5, ax5 = plt.subplots()
    ax5.plot(range(1, int(num_trades) + 1), heat)
    ax5.set_ylim(0, 1)
    st.pyplot(fig5)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π
    if liq_trades:
        st.markdown("#### üíÄ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–π –ø–æ —Å–¥–µ–ª–∫–∞–º")
        fig4, ax4 = plt.subplots()
        ax4.hist(liq_trades, bins=int(num_trades), edgecolor="black")
        st.pyplot(fig4)

    # === üå°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    with st.expander("üå°Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —Ä–∏—Å–∫–∞/–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (Heatmap)"):
        st.markdown("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞–Ω–Ω—ã–π –∏—Ç–æ–≥ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Å–æ—á–µ—Ç–∞–Ω–∏—è—Ö Winrate –∏ –†–∏—Å–∫–∞.")
        wrates = np.arange(30, 81, 5)
        risks = np.arange(0.5, 5.5, 0.5)
        heatmap = np.zeros((len(risks), len(wrates)))
        for i, r in enumerate(risks):
            for j, w in enumerate(wrates):
                sims = []
                for _ in range(100):
                    bal = init_balance
                    for _ in range(50):
                        is_win = np.random.rand() < w / 100
                        risk_amt = bal * r / 100
                        pnl = risk_amt * rr if is_win else -risk_amt
                        bal += pnl
                        if bal <= 0:
                            bal = 0
                            break
                    sims.append(bal)
                heatmap[i, j] = np.median(sims)
        fig7, ax7 = plt.subplots()
        im = ax7.imshow(heatmap, cmap="YlGnBu", origin="lower", aspect="auto")
        ax7.set_xticks(np.arange(len(wrates)))
        ax7.set_xticklabels([f"{w}%" for w in wrates])
        ax7.set_yticks(np.arange(len(risks)))
        ax7.set_yticklabels([f"{r:.1f}%" for r in risks])
        ax7.set_xlabel("üéØ Winrate (%)")
        ax7.set_ylabel("üî• –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%)")
        ax7.set_title("üìä –ú–µ–¥–∏–∞–Ω–Ω—ã–π –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å")
        fig7.colorbar(im, ax=ax7, label="üí∞ –ë–∞–ª–∞–Ω—Å")
        st.pyplot(fig7)

    # üéûÔ∏è –ê–Ω–∏–º–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–π
    st.markdown("#### üéûÔ∏è –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (–¥–æ 10 —Å–∏–º—É–ª—è—Ü–∏–π)")
    st.caption("–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –±–∞–ª–∞–Ω—Å—ã –ø–æ —Ö–æ–¥—É —Å–¥–µ–ª–æ–∫.")

    num_animated = min(10, len(data))
    fig_anim, ax_anim = plt.subplots()
    ax_anim.set_xlim(0, num_trades)
    ax_anim.set_ylim(0, np.max(data[:num_animated]) * 1.1)
    lines_anim = [ax_anim.plot([], [], lw=1)[0] for _ in range(num_animated)]


    def init_anim():
        for line in lines_anim:
            line.set_data([], [])
        return lines_anim


    def update_anim(frame):
        for i, line in enumerate(lines_anim):
            line.set_data(np.arange(frame), data[i, :frame])
        return lines_anim


    ani = animation.FuncAnimation(fig_anim, update_anim, frames=num_trades + 1, init_func=init_anim, blit=True,
                                  interval=100)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ GIF –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é
    with tempfile.NamedTemporaryFile(delete=False, suffix=".gif") as f:
        ani.save(f.name, writer=PillowWriter(fps=10))
        gif_bytes = open(f.name, "rb").read()
        gif_base64 = base64.b64encode(gif_bytes).decode()
        gif_html = f"""
        <img src="data:image/gif;base64,{gif_base64}" width="100%" height="400" alt="–ê–Ω–∏–º–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–π">
        """
        html(gif_html, height=420)